"""
Django settings for TogedaBackend project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
SETTINGS_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = SETTINGS_DIR.parent

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # installed packages
    "import_export",
    "django_extensions",
    "rest_framework.authtoken",
    "location_field.apps.DefaultConfig",
    "corsheaders",
    "channels",
    "storages",
    "rest_framework",
    "drf_yasg",
    "django_filters",
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_hotp",
    "django_otp.plugins.otp_static",
    # "debug_toolbar",
    # apps
    "user",
    "business",
    "poll",
    "stereo",
    "payments",
    "feeds",
    # "chat",
    # "commerce",
    # "connect",
    # "live",
    # "ticket",
    # "tv",
    # "user_id",
    # "reward",
    # "utils",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    # 'channels.middleware.WebSocketMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Moved up
    "django.contrib.messages.middleware.MessageMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 'rest_framework.authtoken.middleware.AuthenticationMiddleware',
]

WSGI_APPLICATION = "TogedaBackend.wsgi.application"
ASGI_APPLICATION = "TogedaBackend.asgi.application"

ROOT_URLCONF = "TogedaBackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "templates",
            os.path.join(BASE_DIR, "notifications/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = "user.User"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "user.auth.backends.UsernameAuthBackend",
]

FROM_EMAIL = "2gedafullstack@gmail.com"

GEOIP_PATH = os.path.join(BASE_DIR, "geoip")

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

# Add DRF authentication and permission classes
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "EXCEPTION_HANDLER": "utils.exception_handler.custom_exception_handler",
}

# Swagger Configuration
LOGIN_URL = "/admin/"
LOGOUT_URL = "/admin/logout/"
LOGOUT_REDIRECT_URL = "/admin/"

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "LOGIN_URL": LOGIN_URL,
    "LOGOUT_URL": LOGOUT_URL,
}


# Channel Layers Settings
CHANNEL_LAYERS = {
    "default": {
        # "BACKEND": "channels.layers.InMemoryChannelLayer",
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

CSRF_TRUSTED_ORIGINS = ["http://development.2geda.net/"]

# Paystack Integration
PAYSTACK_PUBLIC_KEY = config("PAYSTACK_PUBLIC_KEY")
PAYSTACK_SECRET_KEY = config("PAYSTACK_SECRET_KEY")
PAYSTACK_PAYMENT_CALLBACK_URL = config("PAYSTACK_PAYMENT_CALLBACK_URL")

# Twilio Account configuration
SMS_BACKEND = "sms.backends.twilio.SmsBackend"
TWILIO_ACCOUNT_SID = config("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = config("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = config("TWILIO_PHONE_NUMBER")


STATICFILES_DIRS = [BASE_DIR / "notifications/static"]

if config("SEND_EMAIL", cast=bool):
    EMAIL_HOST = config("EMAIL_HOST")
    EMAIL_HOST_USER = config("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
    EMAIL_PORT = 465
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = True
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

USE_S3 = config("USE_S3", cast=bool)
if USE_S3:
    # AWS S3 Configuration
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_SIGNATURE_NAME = config("AWS_S3_SIGNATURE_NAME")
    AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")
    AWS_S3_FILE_OVERWRITE = config("AWS_S3_FILE_OVERWRITE", default=False, cast=bool)
    AWS_DEFAULT_ACL = config("AWS_DEFAULT_ACL")
    AWS_S3_VERITY = config("AWS_S3_VERITY", default=True, cast=bool)
    DEFAULT_FILE_STORAGE = config("DEFAULT_FILE_STORAGE")
else:
    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/


    STATIC_URL = "/static/"
    MEDIA_URL = "/media/"

    if not config("DEV", cast=bool):

        STATIC_ROOT = config("CPANEL_ROOT") + "/public_html/staticfiles"
        MEDIA_ROOT = config("CPANEL_ROOT") + "/public_html/mediafiles"
    else:
        STATIC_ROOT = os.path.join(BASE_DIR, "static")
        MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# print("Static root: ", STATIC_ROOT)
# print("Media root: ", MEDIA_ROOT)
